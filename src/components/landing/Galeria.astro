---
import 'photoswipe/style.css';
import { Image } from 'astro:assets';

// Define the image paths and details
const galleryImages = [
  { href: '/fotos/foto1.jpg', src: '/fotos/foto1.jpg' },
  { href: '/fotos/foto2.jpg', src: '/fotos/foto2.jpg' },
  { href: '/fotos/foto3.jpg', src: '/fotos/foto3.jpg' },
  { href: '/fotos/foto4.jpg', src: '/fotos/foto4.jpg' },
  { href: '/fotos/foto5.jpg', src: '/fotos/foto5.jpg' },
  { href: '/fotos/foto6.jpg', src: '/fotos/foto6.jpg' },
  { href: '/fotos/foto7.jpg', src: '/fotos/foto7.jpg' },
  { href: '/fotos/foto8.jpg', src: '/fotos/foto8.jpg' },
  { href: '/fotos/foto9.png', src: '/fotos/foto9.png' },
  { href: '/fotos/foto10.png', src: '/fotos/foto10.png' },
  { href: '/fotos/foto11.png', src: '/fotos/foto11.png' },
  { href: '/fotos/foto12.png', src: '/fotos/foto12.png' },
  { href: '/fotos/foto13.png', src: '/fotos/foto13.png' },
  { href: '/fotos/foto14.png', src: '/fotos/foto14.png' },
  { href: '/fotos/foto15.png', src: '/fotos/foto15.png' },
  { href: '/fotos/foto16.png', src: '/fotos/foto16.png' },
  { href: '/fotos/foto17.png', src: '/fotos/foto17.png' },
  { href: '/fotos/foto18.png', src: '/fotos/foto18.png' },
  { href: '/fotos/foto19.png', src: '/fotos/foto19.png' },
  { href: '/fotos/foto21.png', src: '/fotos/foto21.png' },
];
---

<head>
  <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@200;400&family=Roboto:wght@100&display=swap" rel="stylesheet">
</head>

<section id="acerca_de_nosotros" class="g-gradient-to-b w-full">
  <div class="mx-auto w-full lg:px-24 max-w-7xl md:px-12 items-center px-8 py-4 scroll-mt-12 g-gradient-to-b flex flex-col items-center"> 
    <h1 class="text-3xl font-roboto tracking-tight text-gray-900 sm:text-3xl">Gallery</h1>
    <div class="border-b border-celeste_aimara w-1/2 mt-4"></div>
    <br>
    <p class="text-base text-gray-600 mb-8 text-center">
      As a group, we participate in and organize various activities related to Artificial Intelligence and Computer Science, as well as share fraternal moments to strengthen our bonds and exchange ideas and experiences.
    </p>
  </div>
</section>

<div class="w-full mx-auto bg-gray-1 pt-4 pb-4 mt-0" id="galeria">
  <div class="w-3/4 mx-auto mt-0">
    <div class="grid min-h-[140px] w-full place-items-center rounded-lg p-6 lg:overflow-visible">
      <div class="grid grid-cols-2 md:grid-cols-2 lg:grid-cols-4 gap-4">
        {galleryImages.map((image, index) => (
          <div>
            <div 
              class="image-item cursor-pointer"
              data-src={image.href}
            >
              <Image
                src={image.src}
                alt={`Gallery image ${index + 1}`}
                width={600}
                height={400}
                class="object-cover object-center h-40 max-w-full rounded-lg md:h-60 hover:-translate-y-2 transition-transform duration-300 ease-in-out"
              />
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>
</div>

<!-- Modal para visualización de imágenes -->
<div 
  id="imageModal" 
  class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-80 hidden overflow-hidden p-2 sm:p-4"
>
  <div class="relative flex items-center justify-center">
    <button 
      id="closeModal" 
      class="absolute -top-8 sm:-top-10 right-0 text-white bg-gray-700/50 hover:bg-gray-700/70 rounded-full w-8 h-8 sm:w-10 sm:h-10 flex items-center justify-center z-60 text-sm sm:text-base"
    >
      ✕
    </button>
    <img 
      id="modalImage" 
      src="" 
      alt="Imagen a tamaño completo" 
      class="max-w-[95%] max-h-[95vh] object-contain transition-all duration-300 ease-in-out"
    />
  </div>
</div>

<script>
  // Ensure the script runs after the DOM is fully loaded
  document.addEventListener('DOMContentLoaded', () => {
    // Select all elements to ensure they're available
    const imageItems = document.querySelectorAll('.image-item');
    const modal = document.getElementById('imageModal');
    const modalImage = document.getElementById('modalImage');
    const closeModalBtn = document.getElementById('closeModal');

    // Function to open the modal
    function openModal(imageSrc) {
      // Ensure the image source is set before showing the modal
      modalImage.src = imageSrc;
      
      // Use a small timeout to ensure image is loaded
      setTimeout(() => {
        modal.classList.remove('hidden');
        document.body.style.overflow = 'hidden';
      }, 50);
    }

    // Function to close the modal
    function closeModal() {
      modal.classList.add('hidden');
      modalImage.src = '';
      document.body.style.overflow = 'auto';
    }

    // Add event listeners with extra safety
    function addModalListeners() {
      // Remove existing listeners first to prevent multiple bindings
      imageItems.forEach(item => {
        item.removeEventListener('click', imageClickHandler);
        item.addEventListener('click', imageClickHandler);
      });

      function imageClickHandler(event) {
        const imageSrc = event.currentTarget.getAttribute('data-src');
        openModal(imageSrc);
      }

      // Ensure close button listener
      closeModalBtn.removeEventListener('click', closeModal);
      closeModalBtn.addEventListener('click', closeModal);

      // Modal background close
      modal.removeEventListener('click', modalBackgroundCloseHandler);
      modal.addEventListener('click', modalBackgroundCloseHandler);

      function modalBackgroundCloseHandler(event) {
        if (event.target === modal) {
          closeModal();
        }
      }
    }

    // Initial setup of listeners
    addModalListeners();

    // Escape key handler
    document.addEventListener('keydown', (event) => {
      if (event.key === 'Escape' && !modal.classList.contains('hidden')) {
        closeModal();
      }
    });

    // Optional: Re-add listeners if content is dynamically loaded
    if (window.MutationObserver) {
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          if (mutation.addedNodes.length) {
            addModalListeners();
          }
        });
      });

      observer.observe(document.body, {
        childList: true,
        subtree: true
      });
    }
  });
</script>
